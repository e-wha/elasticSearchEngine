input {
    jdbc {
        jdbc_driver_library => "/usr/share/logstash/logstash-core/lib/jars/postgresql.jar"
        jdbc_driver_class => "org.postgresql.Driver"
        jdbc_connection_string => "jdbc:postgresql://postgres:5432/postgres"
        jdbc_user => "postgres"
        jdbc_password => "postgres"
        statement => "SELECT * FROM tourist_attraction;"  # PostgreSQL에서 가져올 데이터 쿼리
        schedule => "* * * * *"  # 매 분마다 데이터 가져오기
      }
}

filter {
  if [tags] {
    mutate {
      split => { "tags" => "," }
    }
    ruby {
      code => '
        tags = event.get("tags")
        if tags
          event.set("tags", tags.map { |t| t.strip })
        end
      '
    }
  }
  if [likes] {
    mutate {
     split => { "likes" => "," }
    }
    ruby {
      code => '
        likes = event.get("likes")
        if likes
          event.set("likes", likes.map { |l| l.strip })
        end
      '
    }
  }

  # title_sort 필드 추가
  if [title] {
    mutate {
      add_field => { "title_sort" => "%{title}" }
    }
  }
}

output {
	elasticsearch {
		hosts => "elasticsearch:9200"
		user => "logstash_internal"
		password => "${LOGSTASH_INTERNAL_PASSWORD}"
		index => "tourist_attraction_index"  # Elasticsearch 인덱스 설정
        document_id => "%{content_id}"  # PostgreSQL의 id를 Elasticsearch 문서 ID로 사용
        manage_template => true
        template => "/usr/share/logstash/tour_template.json"
        template_name => "tourist_attraction_index"
        template_overwrite => true
	}
}